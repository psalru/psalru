"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[794],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var i=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},s=Object.keys(t);for(i=0;i<s.length;i++)n=s[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(i=0;i<s.length;i++)n=s[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=i.createContext({}),o=function(t){var e=i.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=o(t.components);return i.createElement(l.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},y=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,s=t.originalType,l=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),d=o(n),y=r,m=d["".concat(l,".").concat(y)]||d[y]||c[y]||s;return n?i.createElement(m,a(a({ref:e},u),{},{components:n})):i.createElement(m,a({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=n.length,a=new Array(s);a[0]=y;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=t,p[d]="string"==typeof t?t:r,a[1]=p;for(var o=2;o<s;o++)a[o]=n[o];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8155:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>o});var i=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 2030\xbb"},a="\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0430\u0439\u0442\u0430 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 2030\xbb",p={unversionedId:"parsing/priority-2030/index",id:"parsing/priority-2030/index",title:"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0430\u0439\u0442\u0430 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 2030\xbb",description:"\u0414\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u043e\u0434\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432 \u2014 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 2030\xbb. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0451 \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b.",source:"@site/docs/02-parsing/01-priority-2030/index.mdx",sourceDirName:"02-parsing/01-priority-2030",slug:"/parsing/priority-2030/",permalink:"/docs/parsing/priority-2030/",draft:!1,editUrl:"https://github.com/psalru/psalru/tree/master/docs/02-parsing/01-priority-2030/index.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 2030\xbb"},sidebar:"tutorialSidebar",previous:{title:"\u041f\u0430\u0440\u0441\u0438\u043d\u0433",permalink:"/docs/category/\u043f\u0430\u0440\u0441\u0438\u043d\u0433"},next:{title:"\u041d\u0418\u041e\u041a\u0422\u0420, \u0420\u0418\u0414 \u0438 \u0434\u0438\u0441\u0441\u0435\u0440\u0442\u0430\u0446\u0438\u0438",permalink:"/docs/parsing/rosrid/"}},l={},o=[{value:"\u0421\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432",id:"\u0441\u043f\u0438\u0441\u043e\u043a-\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432",level:2},{value:"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b",id:"\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b",level:2}],u={toc:o},d="wrapper";function c(t){let{components:e,...n}=t;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u043f\u0430\u0440\u0441\u0438\u043d\u0433-\u0441\u0430\u0439\u0442\u0430-\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430-2030"},"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441\u0430\u0439\u0442\u0430 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 2030\xbb"),(0,r.kt)("p",null,"\u0414\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u043e\u0434\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432 \u2014 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 2030\xbb. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0451 \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b."),(0,r.kt)("p",null,"\u041d\u0430\u0434\u043e \u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 ",(0,r.kt)("strong",{parentName:"p"},"\u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0440\u0435\u043a\u0443 \xab\u0414\u0430\u043b\u044c\u043d\u0438\u0439 \u0412\u043e\u0441\u0442\u043e\u043a\xbb"),", \u0442.\u043a. \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0430\u044f 2023 \u0433\u043e\u0434\u0430, \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u044b \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u0440\u0435\u043a\u0443 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'showLineNumbers title="\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"',showLineNumbers:!0,title:'"\u0418\u043c\u043f\u043e\u0440\u0442\u044b',"\u0438":!0,"\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435":!0,'\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"':!0},"import time\nimport requests\nimport pandas as pd\n\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c\nsession = requests.session()\n# \u041d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0437\u0430\u0439\u0434\u0451\u043c \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0437\u0430 \u043f\u0435\u0447\u0435\u043d\u044c\u043a\u0430\u043c\u0438\nhome_resp = session.get('https://priority2030.ru/')\nis_everything_okay = home_resp.status_code == 200\n")),(0,r.kt)("h2",{id:"\u0441\u043f\u0438\u0441\u043e\u043a-\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432"},"\u0421\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432"),(0,r.kt)("p",null,"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'showLineNumbers title="\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432"',showLineNumbers:!0,title:'"\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c',"\u0441\u043f\u0438\u0441\u043e\u043a":!0,'\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432"':!0},"university_list_resp = session.get('https://lk.priority2030.ru/api/v0/priority/list')\nuniversity_list = pd.DataFrame()\n\nif is_everything_okay and university_list_resp.status_code == 200:\n    university_list_json = university_list_resp.json()\n\n    if university_list_json['status'] == 'success':\n        university_list = pd.json_normalize(university_list_json['data']['participants'])\n\n# \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\nuniversity_list = university_list.rename(columns={'special': 'type'})\nuniversity_list['type'] = university_list['type'].apply(lambda x: x if x != '' else '\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c')\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u043e\u0432\nuniversity_list.to_csv('data/university_list.csv', index=False)\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u0442\u0440\u0435\u043a\u0430\u043c\nuniversity_list[['type', 'id']].groupby(by='type').count().rename(columns={'id': 'count'})\n")),(0,r.kt)("table",{class:"dataframe"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null),(0,r.kt)("th",null,"count")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"type"),(0,r.kt)("th",null))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c"),(0,r.kt)("td",null,"73")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e"),(0,r.kt)("td",null,"17")),(0,r.kt)("tr",null,(0,r.kt)("th",null,"\u0422\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0435/\u043e\u0442\u0440\u0430\u0441\u043b\u0435\u0432\u043e\u0435 \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e"),(0,r.kt)("td",null,"31")))),(0,r.kt)("h2",{id:"\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"),(0,r.kt)("p",null,"\u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \xab\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 2030\xbb, \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0443 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f ",(0,r.kt)("strong",{parentName:"p"},"\u0441 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0432 0,5 \u0441\u0435\u043a\u0443\u043d\u0434\u044b")," (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u0441 \u0437\u0430\u0431\u043e\u0442\u043e\u0439 \u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c \u0441\u0432\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \ud83e\udd17), \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u0451 \u043e\u043a\u043e\u043b\u043e 1-2 \u043c\u0438\u043d\u0443\u0442."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'showLineNumbers title="\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430\u043c"',showLineNumbers:!0,title:'"\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c',"\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438":!0,"\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b":!0,"\u043f\u043e":!0,'\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430\u043c"':!0},"university_kpis = pd.DataFrame()\n\nfor i, university in university_list.iterrows():\n    university_id = university['id']\n    resp = session.get(f\"https://lk.priority2030.ru/api/v0/priority/{university_id}/indicator\")\n\n    if is_everything_okay and resp.status_code == 200:\n        json_data = resp.json()\n\n        if json_data['status'] == 'success':\n            kpi_list = list(range(0, len(json_data['data'])))\n\n            for kpi_index in kpi_list:\n                kpi_type = '\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c'\n                elements = pd.json_normalize(json_data['data'][kpi_index]['elements'])\n\n                for j, kpi in elements.sort_values(by='indicator').iterrows():\n                        data_ids = {}\n\n                        # \u0412 API \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0434\u0438\u0447\u044c \u0442\u0432\u043e\u0440\u0438\u0442\u0441\u044f...\n                        # \u0414\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \xab\u041e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0430\u043a\u0442\u0430\xbb \u0438 \xab\u041f\u043b\u0430\u043d\xbb, \u043d\u043e \u0435\u0441\u0442\u044c \u0435\u0449\u0451 \u0438 \xab\u0424\u0430\u043a\u0442\xbb \ud83e\udd37\u200d\u2642\ufe0f\n                        for data_id, data_item in enumerate(kpi['data']):\n                            data_ids[data_item['description']] = data_id\n\n                        for key, value in kpi['data'][data_ids['\u041e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0444\u0430\u043a\u0442\u0430']]['data'].items():\n                            if value is not None:\n                                plan = kpi['data'][data_ids['\u041f\u043b\u0430\u043d']]['data'][key]\n\n                                # \u0412\u044b\u044f\u0441\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043a \u043f\u043e \u0441\u043f\u0435\u0446. \u0447\u0430\u0441\u0442\u0438\n                                if kpi_index > 0:\n                                    kpi_postfix = kpi['indicator'].split('_')[1]\n                                    kpi_type = '\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e' if kpi_postfix == '\u04411' else '\u0422\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0435/\u043e\u0442\u0440\u0430\u0441\u043b\u0435\u0432\u043e\u0435 \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e'\n\n                                university_kpis = pd.concat([university_kpis, pd.DataFrame([{\n                                    'id': university_id,\n                                    'university': university['shortName'],\n                                    'type': kpi_type,\n                                    'indicator': kpi['indicator'],\n                                    'unit': kpi['unit'],\n                                    'year': key,\n                                    'plan': plan,\n                                    'fact': value,\n                                    'percent': round(value / plan, 2) if plan else 0,\n                                    'description': kpi['description'],\n                                    'formula': kpi['formula'],\n                                    'calculation_method': kpi['calculationMethod']\n                                }])])\n\n    time.sleep(0.5)\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0443\u044e\u0441\u044f \u0441\u0431\u043e\u0440\u043a\u0443\nuniversity_kpis.to_csv('data/university_kpis.csv', index=False)\n")),(0,r.kt)("p",null,"\u0412\u0440\u043e\u0434\u0435 \u0431\u044b \u0432\u0441\u0451 \ud83d\udc4d \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 Jupiter Notebook \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u0439 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/psalru/analytics/blob/master/PSAL-19_parse_kpi_from_site_p2030/parse_university_kpis.ipynb"},"\u0441\u0441\u044b\u043b\u043a\u0435")," \u0432 Github."),(0,r.kt)("p",null,"\u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f ",(0,r.kt)("strong",{parentName:"p"},"\u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445"),", \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u2b07\ufe0f \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e ",(0,r.kt)("a",{parentName:"p",href:"https://storage.yandexcloud.net/psal.public/datasets/2023-05-03_universities_kpis_from_p2030_site.xlsx"},"\u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435"),"."))}c.isMDXComponent=!0}}]);